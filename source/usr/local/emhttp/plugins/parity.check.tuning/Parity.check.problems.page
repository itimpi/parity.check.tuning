Menu="About"
Title="Parity Problems Assistant"
Tag="gear"
---
<?PHP
/* Copyright 2022-2023, Dave Walker (itimpi).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * Limetech is given explicit permission to use this code in any way they like.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

?>
<!--
##########################
Parity.check.problems.page
##################33######
-->
<?
require_once "/usr/local/emhttp/plugins/parity.check.tuning/parity.check.tuning.helpers.php";

// Multi-language support
$translations = file_exists("/usr/local/emhttp/webGui/include/Translations.php");
if (!$translations):
eval('?>'.parse_file("/usr/local/emhttp/plugins/parity.check.tuning/Parity.check.problems.page"));
else:
?>
<? 
loadVars(0);
if ($parityTuningNoParity)     echo "<p class='notice'>" . _('No Parity disk present') . ".</p>";
if ($parityTuningActive)   echo "<p class='notice'>" . $parityTuningDescription . ' ' .  _('running') . "</p>"; 
loadVars(0);
if ($vars['mdState'] != 'STARTED') echo "<p class='notice'>" . _('Array must be started to use this assistant') . "</p>";

?>

<script>
var totalSectors = <?=($parityTuningSize * 2)?>;
var noParity = <?=($parityTuningNoParity ? 'true' : 'false')?>;
var myWin;

$(function() {
  if ( typeof caPluginUpdateCheck === "function" ) {
    caPluginUpdateCheck("parity.check.tuning.plg",{element:".pluginUpdate"});
  }
});

$(document).ready(function(){
  var oForm = document.getElementById('parityProblemPage');
  var active = <?=$parityTuningActive?"true":"false"?>;
  var isDisabled = active || noParity;
  oForm.parityProblemType.disabled         = isDisabled;
  oForm.parityProblemStartSector.disabled  = isDisabled;  
  oForm.parityProblemStartPercent.disabled = isDisabled;  
  oForm.parityProblemEndSector.disabled    = isDisabled;  
  oForm.parityProblemEndPercent.disabled   = isDisabled;  
  oForm.parityProblemCorrect.disabled      = isDisabled;
  setProblemType(oForm);
  // TODO: Investigate whether there is a more elegant/efficient solution than forcing page refreshes?
  if (active) setTimeout(refreshPage, 1000 * 30);
});

function refreshPage() {
    window.location.reload(true);
}

function setProblemType(form) { 
    if (form.parityProblemType.value == "sector") {
        document.getElementById('parityProblemSectorStart').style.display  = "inline";
        document.getElementById('parityProblemSectorEnd').style.display    = "inline";
        document.getElementById('parityProblemPercentStart').style.display = "none";
        document.getElementById('parityProblemPercentEnd').style.display   = "none";
    } else {
        document.getElementById('parityProblemPercentStart').style.display = "inline";
        document.getElementById('parityProblemPercentEnd').style.display   = "inline";
        document.getElementById('parityProblemSectorStart').style.display  = "none";
        document.getElementById('parityProblemSectorEnd').style.display    = "none";
    }
	checkStartEnd(form);
}
function changeProblemType(form) { 
	setProblemType(form);
	form.parityProblemCheck.disabled = true;
}

function checkStartEnd(form) {
    var returnValue = true;
    var firstSector = parseInt(form.parityProblemStartSector.value);
    var lastSector  = parseInt(form.parityProblemEndSector.value);
    if (lastSector < firstSector) {
        swal({title: "_(End point too small)_",
              text: "_(The end point must be larger than the start)_.",
          icon:"Error"});
       returnValue = false;
    }
    if (lastSector > totalSectors) {
        swal({title: "_(End point too large)_",
              text: "_(The end has been set to more than the size of the disk)_.",
          icon:"Error"});
        returnValue = false;
    }
	// Check button only available if Apply not enabled (i.e. values saved)
	// TODO:  Does not seem to work as expected - need to work out why
	// form.parityProblemCheck.disabled = (!(document.getElementById('Apply').disabled));
    return returnValue;

}

function changeProblemStartSector(form) {
    var v = form.parityProblemStartSector.value / totalSectors * 100;
    updateIfChanged(form.parityProblemStartPercent, v.toFixed(1));
    checkStartEnd(form);

}

function updateIfChanged(fld, newVal) {
    if (fld.value != newVal) fld.value = newVal;
}

function changeProblemStartPercent(form) {
    var v1 = ((parseFloat(form.parityProblemStartPercent.value)) + 0.049).toFixed(1);
    updateIfChanged (form.parityProblemStartPercent, v1);
    var v2 = Math.floor(parseFloat(v1)/100 * totalSectors);
    updateIfChanged (form.parityProblemStartSector, v2);
    checkStartEnd(form);
}


function changeProblemEndSector(form) {
    var v = form.parityProblemEndSector.value / totalSectors * 100;
    updateIfChanged (form.parityProblemEndPercent, v.toFixed(1));
    checkStartEnd(form);
}

function changeProblemEndPercent(form) {
    var v1 = ((parseFloat(form.parityProblemEndPercent.value)) + 0.049).toFixed(1); 
    updateIfChanged (form.parityProblemEndPercent, v1);
    var v2 = Math.ceil(v1/100 * totalSectors);
    updateIfChanged (form.parityProblemEndSector, v2);
    checkStartEnd(form);
}


// try to center popup relative to Unraid browser window

function positionPopup() {
	var left = window.screenX + 300;
	var top  = window.screenY + 200;
	myWin.moveBy(left,top);
	// myWin.resizeTo(600,800);
	myWin.focus();
}


</script>

<div class='pluginUpdate'></div>

<form   markdown = "1" 
        id       = "parityProblemPage"
        method   = "POST" 
        action   = "/update.php" 
        target   = "progressFrame">
<input type="hidden" 
       name="#file"    
       value="<?=PARITY_TUNING_CFG_FILE?>">  
<input type="hidden" 
       name="#command" 
       value="<?=PARITY_TUNING_PHP_FILE?>">
<input type="hidden"
       name="#arg[1]"
       value="partial"><span style="float:right"><?=$parityTuningVersion?></span>
:parityProblems_intro_plug:
The **Parity Problems Assistant** is part of the **Parity Check Tuning** plugin.<p/>
The current status is **EXPERIMENTAL** and it is always possible that this assistant may be removed in the future).  
**(feedback is welcomed on the basic concept and ideas for improvement)**.<p/>
The idea is that this assistant can be used after a parity check or read check has reported problems and logged the details of any problem sectors to the syslog.  
In many cases such errors can be due to external factors such as cabling or the power supply rather than the actual disks.<p/>
It is also not uncommon, particularly on **Ryzen/ThreadRipper** based systems, to get random parity errors if the RAM is overclocked
(an XMP profile **is** an overclock),  
and the motherboard/CPU combination may also impose limits that are lower than the RAM is capable of supporting.<p/>
If you think you have rectified whatever caused the problems to occur then you can use this assistant to run a partial check over a narrow range to see if the problem still occurs.  
This can be much faster than having to run a full parity check or read check to see if you have resolved the issue or to run a disk extended SMART test to test the actual disk.<p/>
**IMPORTANT**: This assistant should never be used as an alternative to running a full parity check once you think the problem has been resolved.
:end

<?=_('Method used to specify start and stop points')?>:
: <input type="radio" 
        name="parityProblemType" 
        value="sector" 
        <?=($parityTuningCfg['parityProblemType'] == "sector" ? "checked" : "") . "\n"?>
        onclick="changeProblemType(this.form)"> <?=_('Sector Numbers')?>
<input type="radio" 
        name="parityProblemType" 
        value="percent"
        <?=($parityTuningCfg['parityProblemType'] == "percent" ? "checked" : "") . "\n"?>
        onclick="changeProblemType(this.form)"> <?=_('Percentage')?>

:parityProblems_type_plug:
> Select the way you want to specify the start and end points.
>
> You are likely to want to use absolute sector numbers if there are ones that have previously been listed in the syslog as being an error.
> Using absolute sector numbers tends to be more precise and lead to shorter tests but can be more effort to set up.
>
> The alternative is to use percentages. When using percentages then the sector numbers these represent are calculated as percentages of the largest parity disk.
:end

<?=_('Start point for check')?>:
: <span id="parityProblemSectorStart">
<input type="text"
         size='1' class='narrow'
         name="parityProblemStartSector"
         value="<?=$parityTuningCfg['parityProblemStartSector']?>"
         onchange="changeProblemStartSector(this.form)"> <?=_('sector')?>
         </select>
</span>
<span id="parityProblemPercentStart">
<input type="text"
         size='1' class='narrow'
         name="parityProblemStartPercent"
         value="<?=$parityTuningCfg['parityProblemStartPercent']?>"
         onchange="changeProblemStartPercent(this.form)"> <?=_('percent')?>
</span>

:parityProblems_start_plug:
> Select where you want the check to be started from.  You can specify the start point as either a sector number or as a percentage of the size of the largest parity disk.
>
> Specifying absolute sectors is likely to be of particular use when you have extracted the sector numbers from the *syslog* when the original parity check reported errors on those sectors. In a future version of this plugin the plugin may be enhanced to automatically extract such sectors from the *syslog* and give you a drop down list but this feature is not yet implemented.
>
> In practice for technical reasons the check may start slightly earlier than the point you specify, but this will only be by a small amount.
:end

<?=_('End point for check')?>:
: <span id="parityProblemSectorEnd">
<input type="text"
         size='1' class='narrow'
         name="parityProblemEndSector"
         value="<?=$parityTuningCfg['parityProblemEndSector']?>"
         onchange="changeProblemEndSector(this.form)"> <?=_('sector')?>
</span>
<span id="parityProblemPercentEnd">
<input type="text"
         size='1' class='narrow'
         name="parityProblemEndPercent"
         value="<?=$parityTuningCfg['parityProblemEndPercent']?>"
         onchange="changeProblemEndPercent(this.form)"> <?=_('percent')?>
</span>

:parityProblems_end_plug:
> Select where you want the check to be ended. You can specify the start point as either a sector number or as a percentage of the size of the largest parity disk.
>
> In practice for technical reasons the check may end later than the point you specify as a check is only made once a minute to see if the end point has been reached.
:end

<?=_('Write Corrections to Parity')?>:
: <select name="parityProblemCorrect" 
          size='1' class='narrow'>
    <?=mk_option($parityTuningCfg['parityProblemCorrect'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityProblemCorrect'], "1", _("Yes")) . "\n"?>
  </select>

:parityProblems_correct_plug:
> Specify whether you want to attempt to update parity to correct any error found,
> or just do a read test to see if any parity errors are reported.
:end


&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned --> 
 
: <input type="button" 
     value="<?=_('Show Sector Numbers')?>" 
     id="showErrorSector"
	 onclick = "myWin=window.open('/plugins/parity.check.tuning/parity.check.entries.php','errorSectors','scrollbars=yes,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=600,height=900,left=0,top=0');positionPopup()">
	 <?=_('Click to show Parity check entries from syslog')?>


:parityProblems_sectors_plug:
> When you click on the option to **Show Sector Numbers** then the a dialog will be shown
> that extracts entries from the syslog that have shown any sectors for which any parity
> sector is displayed and whether the it was being corrected or is a parity error.
:end

&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned -->
	 
: <input type="submit" 
     name="#apply" 
     value="_(Check)_" 
     id='Apply'
	 onclick="checkStartEnd(this.form)">
<input type="button" 
     id="DONE" 
     value="_(Done)_"
     onclick="done()"><a style='float:right' href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=U2FVNHSETTNRG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" title="_(Donate to plugin author)_"></a>
	 
:parityProblems_check_plug:
> When you click on **Check** then a partial check is initiated that
> will cover at least the start and end points that you have specified. It will be a correcting check 
> if the option to **Write Corrections** is set to **Yes**, and a read-check otherwise.
> Note that this check will run for a minimum of 1 minute even if you specify a very small number of sectors to be checked.
:end

</form>

<?endif;?>
