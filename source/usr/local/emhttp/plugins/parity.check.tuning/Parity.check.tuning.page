Menu="Scheduler:1b"
Title="Parity Check Tuning"
Tag="gear"
---
<?PHP
/* Copyright 2019-2021, Dave Walker (itimpi).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *'
 * Limetech is given expliit permission to use this code in any way they like.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
// error_reporting(E_ALL);

require_once '/usr/local/emhttp/webGui/include/Helpers.php';
require_once '/usr/local/emhttp/plugins/parity.check.tuning/parity.check.tuning.helpers.php';

// Multi-language support

$plugin = 'parity.check.tuning';
$translations = file_exists("$docroot/webGui/include/Translations.php");
// legacy support (with javascript)
$noscript = false;
require_once "$docroot/plugins/$plugin/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$parityTuningPlugin/Parity.check.tuning.page"))?>
<?else:?>
<? 
if (!$parityTuningVersionOK) echo "<p class='notice'>" . _('Requires Unraid 6.7 or later') . "</p>"; 
?>
<script>
var noParity = <?=($parityTuningNoParity ? 'true' : 'false')?>;

// Preset fields to be enabled/disabled as appropriate
function presetParityTuning(form) {
  if (noParity) {
    form.parityTuningRecon.value = "0";
    form.parityTuningClear.value = "0";
    form.parityTuningRecon.disabled = true;
    form.parityTuningClear.disabled = true;
  }
  <? if (!$parityTuningRestartOK):?>
  form.parityTuningRestart.value = "0";
  form.parityTuningRestart.disabled = true;
  <?endif;?>
  var parityTuningDisabled = ((form.parityTuningIncrements.value == '0')  
  			               && (form.parityTuningUnscheduled.value == '0')
                           && (form.parityTuningClear.value == '0')
                           && (form.parityTuningHeat.value == '0'));
  form.parityTuningFrequency.disabled    = parityTuningDisabled;
  form.parityTuningResumeHour.disabled   = parityTuningDisabled;
  form.parityTuningResumeMinute.disabled = parityTuningDisabled;
  form.parityTuningResumeCustom.disabled = parityTuningDisabled;
  form.parityTuningPauseHour.disabled    = parityTuningDisabled;
  form.parityTuningPauseMinute.disabled  = parityTuningDisabled;
  form.parityTuningPauseCustom.disabled  = parityTuningDisabled;
  form.parityTuningNotify.disabled       = parityTuningDisabled;
  
  // Now the heat related options
  parityTuningDisabled = (form.parityTuningHeat.value == "0");
  form.parityTuningHeatHigh.disabled    = parityTuningDisabled;
  form.parityTuningHeatLow.disabled     = parityTuningDisabled;
  form.parityTuningHeatNotify.disabled  = parityTuningDisabled;
  form.parityTuningHeatCritical.disabled= (form.parityTuningHeatShutdown.value !== '1');
  
  if (form.parityTuningFrequency.value == "1") {
    document.getElementById('parityTuningcustomResume').style.display = "inline";
    document.getElementById('parityTuningcustomPause').style.display  = "inline";
    document.getElementById('parityTuningdailyResume').style.display  = "none";
    document.getElementById('parityTuningdailyPause').style.display   = "none";
  } else {
    document.getElementById('parityTuningcustomResume').style.display = "none";
    document.getElementById('parityTuningcustomPause').style.display  = "none";
    document.getElementById('parityTuningdailyResume').style.display  = "inline";
    document.getElementById('parityTuningdailyPause').style.display   = "inline";
  }
}

function confirmReconYes(form) {
    if (form.parityTuningRecon.value == '1') {
        swal({title: "_(This might affect array integrity)_",
              text: "_(Pausing an operation that is building parity or rebuilding a failed disk has a level of risk as your array is not back in a protected state until this operation completes successfully)_.   _(Only enable this option if the operation is adversely affecting system use and you are not worried about the extra time that will elapse before the system is once again in a protected state)_.",
              icon: "Warning"});
    }
}

function confirmClearYes(form) {
    if (form.parityTuningClear.value == '1') {
        swal({title: "_(Do you really want this)_?",
              text: "_(Pausing an disk Clear operation extends the time before the disk is successfully added to the array and becomes ready for formatting and then used for data storage)_.  _(On most systems a disk Clear operation does not advesely affect performance so typically this option is left disabled)_.",
              icon: "Warning"});
    }
}

$(document).ready(function(){
  var oForm = document.getElementById('parityTuningPage');
  presetParityTuning(oForm);
});

function checkCustom(fld) {
    var res = fld.value.split(" ");

    if ((res.length != 5) || (res[4] == "")) {
        swal({title: "_(Error in custom entry)_",
              text: "_(A crontab entry should have 5 space-separated values defining the minutes, hour, day of the month, month, day of the week)_.  _(Click on the crontab link to get more details on valid formats)_.",
              icon:"Error"});
    }
}

function checkNotifications (me) {
<? if ($dynamixCfg['notify']['system'] == "" ): ?>
    swal({title:"_(Notifications not enabled)_ ",
          text:"_('Before you can set this option to Yes you must first have enabled system notifications')_.",
          icon:"Info"});
    me.value="no";
<?endif;?>
}

function checkTimeRange(form) {
  var difference = form.parityTuningPauseHour.value - form.parityTuningResumeHour.value;
  if ( difference < 0) difference += 24;
  if (difference > 12 ) {
    swal({title: "_(Pause and Resume times)_?",
          text:"_(The Pause and Resume times would give an increment length of more than 12 hours which is unusual)_.  Are you sure you have not got these the wrong way around?",
          icon:"Warning"});
    }
}

function checkHeatLow(form) {
  var difference = form.parityTuningHeatLow.value - form.parityTuningHeatHigh.value;
  if (difference < 1 ) {
    swal({title: "_(Temperature Pause and Resume)_?",
          text:"_(The Resume value must be greater than the Pause one for the heat related Pause and Resume to work correctly as they are both relative to the disk temperature warning value)_",
          icon:"Warning"});
    }
}

function checkLoggingMode (form) {
    switch (form.parityTuningLogging.value) {
    case "0":
            break;
    case "1":
            swal({title: "_(Do you really want Debug logging mode)_?",
            text:"_(Debug mode is intended to give users a feel for when the plugin is active)_ . _(Debug mode can generate frequent additional entries in the syslog file so do not leave debug mode active if you are not interested in this information)_.",
            icon:"Warning"});
            break;

    case "2":
            swal({title: "_(Do you really want testing mode)_?",
            text:"_(Testing mode is normally only used by the plugin author or when gathering evidence of a suspected bug in the plugin)_ . _(Testing mode is very verbose and generates a lot of additional entries in the syslog file so you do not want it enabled unless this is really necessary)_.",
            icon:"Warning"});
            break;
    } // end switch
}


$(function() {
  if ( typeof caPluginUpdateCheck === "function" ) {
    caPluginUpdateCheck("parity.check.tuning.plg",{element:".pluginUpdate"});
  }
});

</script>

<div class='pluginUpdate'></div>

<form   markdown = "1" 
        id       = "parityTuningPage"
        method   = "POST" 
        action   = "/update.php" 
        target   = "progressFrame">
        
<input type="hidden" 
       name="#file"    
       value="<?=$parityTuningCfgFile?>">
<input type="hidden" 
       name="#command" 
       value="<?=$parityTuningPhpFile?>">
<input type="hidden"
       name="#arg[1]"
       value="updatecron">


<?= sprintf(_('Use increments for %s %s'), _('Scheduled'), ($parityTuningNoParity ? _('Read Check') : _('Parity Check'))); ?>:
: <select name="parityTuningIncrements" 
          size='1' class='narrow' 
          onClick="presetParityTuning(this.form)"
          onBlur="presetParityTuning(this.form)"
          onChange="presetParityTuning(this.form)">
     <?=mk_option($parityTuningCfg['parityTuningIncrements'], "0", _("No")) . "\n"?>
     <?=mk_option($parityTuningCfg['parityTuningIncrements'], "1", _("Yes")) . "\n"?>
  </select>

:parity_tune_explain_plug:
> This main reason for this plugin is to allow you to limit parity checks (to running at times that will not inconvenience you.<br>Setting this option to **Yes** specifies that parity checks should be run in increments spread over several days.<br><br>If you have set this to **No** then you get the default system behavior of parity checks running without a break to completion unless you manually stop/pause/cancel them.<br><br>As an example of what this plugin can do assume:<br>- You have a parity check you have scheduled to start on the first of every month at midnight<br>- Your past experience has shown that if the parity check runs uninterrupted it takes 30 hours to complete.<br>- You set this plugin to use 3 hour increments starting at midnight and finishing at 3.00 A.M.<br>- The parity check will now actually take 10 days elapsed time (10 x 3 = 30) so the parity check will complete on 10th of the month.<br>- You have scheduled these increments to run starting at midnight and finishing at 3:00 A.M. when you know the system is not being used.<br>- ou are not worried about this increased elapsed time and will welcome the increased system responsiveness during normal use.<br>>-The rest of the month this plugin will do nothing as there is no active parity check in progress when the start time for an increment comes around.<br><br>**CAUTION:**  If the array is stopped while an array operation is incomplete then the progress so far is lost and it can only be restarted from the beginning
:end

<?= sprintf(_('Use increments for %s %s'), _('Unscheduled'), ($parityTuningNoParity ? _('Read Check') : _('Parity Check'))); ?>:
: <select name="parityTuningUnscheduled" 
          size='1' class='narrow'
          onChange="presetParityTuning(this.form)">
      <?=mk_option($parityTuningCfg['parityTuningUnscheduled'], "0", _("No")) . "\n"?>
      <?=mk_option($parityTuningCfg['parityTuningUnscheduled'], "1", _("Yes")) . "\n"?>
  </select>

:parity_tune_unscheduled_plug:
> Should parity checks that are unscheduled also be run in increments?<br><br>The most likely scenario for this to occur is the case where an unclean shutdown has occurred and the system has therefore started an automatic parity check when the array is started.  Another possibility is that you decided to manually start the parity check for some reason.<br><br>In both these case it is quite likely that you will want such a check to run to completion without interruption and if so leave this option set to <strong>No</strong>.  If you instead set it to <strong>Yes</strong> then the increment schedule will be applied.  After an unclean shutdown any parity errors are most likely to occur near the beginning of the disks so setting this option to <strong>Yes</strong> is normally reasonably safe as long as you do not mind that the check is likely to take much longer to complete.<br><br><strong>TIP:</strong> With this option set to <strong>Yes</strong> then if you manually start a Parity Check from the Main page and then manually Pause the check, this will result in the check being run in increments between the scheduled times until the Parity Check completes.
:end

_(Increment frequency)_:
: <select name="parityTuningFrequency" 
          size='1' class='narrow' 
          onchange="presetParityTuning(this.form)">
     <?=mk_option($parityTuningCfg['parityTuningFrequency'], "0", _("Daily")) . "\n"?>
     <?=mk_option($parityTuningCfg['parityTuningFrequency'], "1", _("Custom")) . "\n"?>
  </select>
  
:parity_tune_frequency_plug:
> The frequency at which parity check increments should be run.<br><br>In normal operation it is expected that the **Daily** option will be the one that most users will want to use so this is the default.   To support any user looking for other frequencies there is the option to set up **Custom** schedules which will allow for more complicated schedules for the Pause and Resume times.  When you use this option you are given the option to specify the time as used by the Linux <a href="https://en.wikipedia.org/wiki/Cron#Overview"  target="_blank">crontab</a> utility.   
:end

_(Increment resume time)_:
: <span id="parityTuningcustomResume">
  <input type="text"
         size='1' class='narrow'
         name="parityTuningResumeCustom"
         value="<?=$parityTuningCfg['parityTuningResumeCustom']?>"
         onblur="checkCustom(this)">
  &nbsp; _(entry in )_ <a href="https://en.wikipedia.org/wiki/Cron#Overview" target="_blank">crontab</a> format
</span>
<span id="parityTuningdailyResume">
  <select name="parityTuningResumeHour" 
          size='1' class='narrow'
          onChange="checkTimeRange(this.form)">
     <?for ($d=0; $d<=23; $d++):?>
         <?=mk_option($parityTuningCfg['parityTuningResumeHour'], strval($d), sprintf("%02d", $d)) . "\n"?>
     <?endfor;?>
  </select>
  <select name="parityTuningResumeMinute" 
          size='1' class='narrow'>
    <?for ($d=0; $d<=55; $d+=5):?>
      <?=mk_option($parityTuningCfg['parityTuningResumeMinute'], strval($d), sprintf("%02d", $d)) . "\n"?>
    <?endfor;?>
  </select>
  &nbsp;&nbsp;HH:MM
</span>

:parity_tune_resume_plug:
> The time at which a paused parity check should be resumed.<br>If no parity check is currently paused when this time comes around then no action will be taken.<br><br>Typically, this time would be set to be the start of an idle period overnight.   An appropriate value might be to use the same time that you have specified for a scheduled parity check to start.<br><br>If the increment period has been set to <strong>Custom</strong> then the hours/minutes fields are hidden and you are instead given the option to set the time in <a href="https://en.wikipedia.org/wiki/Cron#Overview"  target="_blank">crontab</a> format.
:end

_(Increment pause time)_:
: <span id="parityTuningcustomPause">
   <input type="text"
          size='1' class='narrow'
          name="parityTuningPauseCustom"
          value="<?=$parityTuningCfg['parityTuningPauseCustom']?>"
          onblur="checkCustom(this)">
  &nbsp; _(entry in )_ <a href="https://en.wikipedia.org/wiki/Cron#Overview" target="_blank">crontab</a> _(format)_
</span>
<span id="parityTuningdailyPause">
  <select name="parityTuningPauseHour" 
          size='1' class='narrow'
          onChange="checkTimeRange(this.form)">
      <?for ($d=0; $d<=23; $d++){?>
        <?=mk_option($parityTuningCfg['parityTuningPauseHour'], strval($d), sprintf("%02d", $d)) . "\n"?>
      <?}?>
    </select>
    <select name="parityTuningPauseMinute" 
            size='1' class='narrow'>
      <?for ($d=0; $d<=55; $d+=5):?>
          <?=mk_option($parityTuningCfg['parityTuningPauseMinute'], strval($d), sprintf("%02d", $d)) . "\n"?>
      <?endfor;?>
    </select>
    &nbsp;&nbsp;HH:MM
</span>

:parity_tune_pause_plug:
> The time at which a running parity check should be paused. Typically this would be set to be a time when you want other activity to not be affected by a running parity check.<br>If no parity check is actively running when this time comes around then no action will be.<br><br>Normally you want to make sure that this time is set to be after the time that you schedule regular parity checks to run.  The first increment will then be from when the regular parity check is scheduled to start up to the time you have specified for the increment to end.<br><br>If the increment period has been set to <strong>Custom</strong> then the hours/minutes fields are hidden and you are instead given the option to set the time in <a href="https://en.wikipedia.org/wiki/Cron#Overview"  target="_blank">crontab</a> format.<br><br>You also want to make sure that the time allocated to running increments is sufficient to expect the parity check to run to completion before the next check is scheduled to start.   Since most people only schedule parity checks to run infrequently (e.g. Monthly or Quarterly) then this is unlikely to be an issue but it is something to take into consideration.  
:end

_(Send notifications for Pause or Resume of increments)_:
: <select name="parityTuningNotify" 
          size='1' class='narrow'
          onchange="checkNotifications(this)">
    <?=mk_option($parityTuningCfg['parityTuningNotify'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningNotify'], "1", _("Yes")) . "\n"?>
  </select>

:parity_tune_notify_plug:
> Setting this option to <strong>Yes</strong> means that you will be sent a notification every time the plugin Pauses or Resumes an array operation.<br>If you would rather not get such notifications then leave this option set to <strong>No</strong>.<br>The notification is sent as a <strong>Notice</strong> category message to the targets specified under <a href="Settings/Notifications">Settings->Notification Settings</a>.
:end


&nbsp;

_(Use increments for Parity-Sync/Data Rebuild operations)_:
: <select name="parityTuningRecon" 
          size='1' class='narrow'
          onchange="confirmReconYes(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningRecon'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningRecon'], "1", _("Yes")) . "\n"?>
  </select> <? if ($parityTuningNoParity) echo "<font color=#FF8C2F>_(You require a parity disk present for this option to be relevant)_</font>"; ?>

:parity_tune_allops_plug:
> Should operations that involve building new parity or rebuilding a failed disk be run using increments?<br><br>This type of check will only be run if there is potentially some issue with your array and action is being taken to get it back into a protected state.<br><br><strong>IMPORTANT</strong>: Until this operation completes your array is not fully protected so it is assumed that most people will want this option left at <strong>No</strong>.   Do not select <strong>Yes</strong> unless you are absolutely certain that is what you want.
:end

_(Use increments for disk Clear operations)_:
: <select name="parityTuningClear" 
          size='1' class='narrow'
          onchange="confirmClearYes(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningClear'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningClear'], "1", _("Yes")) . "\n"?>
  </select> <? if ($parityTuningNoParity) echo "<font color=#FF8C2F>_(You require a parity disk present for this option to be relevant)_</font>"; ?>

:parity_tune_clear_plug:
> Should disk Clear operations be run using increments.<br><br>A disk Clear operation occurs when you add a new drive (that has not been pre-cleared (using the Pre-Clear plugin) to an array that is parity protected.  The Clear process writes zeroes to every sector on the new disk so that it can be added to the array without affecting the existing parity. Until the Clear operation has completed you are not able to format the disk in Unraid and start using it for storing data. <br></br>Since until the Clear operation completes the disk will not be available for use it is likely that most people will want this option left at <strong>No</strong>.   In addition, a Clear operation tends not to put much of a load on the system so is less likely to impact performance in normal daily use.
:end

_(Resume running Array operations on next array start)_:
: <select name="parityTuningRestart" 
          size='1' class='narrow'
          onchange="presetParityTuning(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningRestart'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningRestart'], "1", _("Yes")) . "\n"?>
  </select><? if (!$parityTuningRestartOK) echo "<font color=#FF8C2F>_(This option is only available with Unraid 6.9.0-rc2 or later)_</font>"; ?>
  
:parity_tune_restart_plug:
> Unraid will normally abandon an array operation (parity check, parity sync, read check, disk rebuild, disk clear) if the sytem is shutdown, rebooted  or the array is stopped (with the only option being to restart the array operation from the beginning).  Setting this option allows such operations to be restarted by this plugin from the point they had reached as long as the following criteria are met<br>- The array was shutdown tidily<br>- The user must not have made any changes to the array configuration.<br><br>As long as these criteria are met then when the array is next started the operation is resumed from the point previously reached.<br><br>'''NOTES:'''<br>- If the array operation was within the time set for a scheduled increment to be running then on restarting the array operation it will be set to be paused if now outside the time set for running increments.<br:If the array operation was manually paused then the restarted array oteration will also be paused<br> - If you want to use this feature by simply stopping the array without immediately using the '''Reboot''' or '''Shutdown''' buttons then you first need to manually '''Pause''' the array operation before using the '''Stop''' button.  If you to this and successfully stop the array then the array operation will now be resumed if you simply '''Start''' the array again, and also on the next array start after '''Reboot''' or '''Shutdown'''.
:end


&nbsp;

_(Pause and Resume array operations if disks overheat)_:
: <select name="parityTuningHeat" 
          size='1' class='narrow'
          onClick="presetParityTuning(this.form)"
          onBlur="presetParityTuning(this.form)"
          onchange="presetParityTuning(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningHeat'], "1", _("Yes")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningHeat'], "0", _("No")) . "\n"?>
  </select>


:parity_tune_hot_plug:
> Pause an array operation(Parity Check, Parity-Sync/Disk Rebuild, disk Clear) if the disk temperatures exceeds the limits you have set.<br><br>The temperatures are checked against the thresholds set for the Warning disk temperature levels. If a threshold has been defined for an individual drive (accessed by clicking on the drive in the Main tab) then this is the value used.  If not the global setting (set via Settings->Display Settings) will be used.<br><br>A much better solution is to improve the cooling in your case so that the disks never overheat.   In practise this may not always prove practical.<br><br>If the array operation was part of running an increment then it will not be resumed outside the time allotted for the increment.   If the array operation was initiated for any other reason then the Pause/Resume behavior on temperature is always active.
:end

_(Pause an array operation at)_:
: <input name="parityTuningHeatHigh" 
         size='1' class='narrow'
         type='text'
         onchange="checkHeatLow(this.form)"
         value="<?=$parityTuningCfg['parityTuningHeatHigh']?>">&deg;<?= $tempUnit ?> below warning disk temperature threshold

:parity_tune_warn_plug:
> This value indicates how close to the value set for the Warning Disk Temperature Threshold a disks temperature is allowed to reach before a **pause** of a running array operation is triggered.<br>You normally want a small positive value to trigger the pause before Unraid gets around to sending you a notification that the temperature warning threshold has been reached for a disk.<br><br>If an explicit threshold has been defined for an individual drive then this is the value used.  If not the global setting will be used.<br><br>If there is no active array operation then no action will be taken even if disk temperatures exceed the specified threshold.<br><br> If there is no running array operation then no action will be taken.
:end

_(Resume an array operation at)_:
: <input name="parityTuningHeatLow" 
         size='1' class='narrow'
         type='text'
         onchange="checkHeatLow(this.form)"
         value="<?=$parityTuningCfg['parityTuningHeatLow']?>">&deg;<?= $tempUnit ?> _(below warning disk temperature)_ threshold

:parity_tune_low_plug:
> This value indicates how much below the Warning temperature threshold of a drive must reach before a **resume** of an array operation is issued.<br>You need to get a good balance between array operations being resumed too soon (and thus quickly reaching the level to initiate another pause) and wasting a lot of time.<br><br>If a disk ever gets spun down the temperature is not readily available so it will be assumed that this criteria has been met<br><br>If there is no paused array operation then no action will be taken. 
:end

_(Send notifications for temperature related Pause or Resume)_:
: <select name="parityTuningHeatNotify" 
          size='1' class='narrow'
          onchange="checkNotifications(this)">
    <?=mk_option($parityTuningCfg['parityTuningHeatNotify'], "0", _("No")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningHeatNotify'], "1", _("Yes")) . "\n"?>
  </select>

:parity_tune_temp_notify_plug:
> Setting this option to **Yes** means that you will be sent a notification every time the plugin Pauses or Resumes an array operation due to the temperature of your drives.<br>If you would rather not get such notifications then leave this option set to **No**.    The notification is sent as a **Notice**> category message to the targets specified under <a href="Settings/Notifications">Settings->Notification Settings</a>.
:end

&nbsp;

_(High disk temperatures can shutdown server)_:
: <select name="parityTuningHeatShutdown" 
          size='1' class='narrow'
          onClick="presetParityTuning(this.form)"
          onBlur="presetParityTuning(this.form)"
          onchange="presetParityTuning(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningHeatShutdown'], "0", _("Disabled")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningHeatShutdown'], "1", _("Enabled")) . "\n"?>

  </select>

:parity_tune_shutdown_plug:
> If set to **Yes''** then automatically start a tidy shutdown of the server if any disk in the array or a cache pool reach the defined temperature threshold.<br>The temperatures are checked against the thresholds set for the **Critical** disk temperature levels. If a Critical temperature has been defined for an individual drive (accessed by clicking on the drive in the Main tab) then this is the value used.  If not the global setting (set via Settings->Display Settings) will be used.<br><br>This option intended to be triggered if for some reason the system's cooling system is insufficient or if it has failed in some way. The idea is that you want to do a tidy shutdown before the disks become damaged due to overheating badly.   The shutdown that is triggered is functionally the same as would be the case of pressing the Shutdown button on the Main page of the Unraid GUI.  If notifications are enabled then you are sent one to indicate that this has happened.<br><br>When the server is started up again after such a shutdown then when the array is started you will be notified that a temperature related shutdown happened in case you were not aware of the reason.<br><br>**CAUTION:**  If the array is stopped while an array operation is incomplete then the progress so far is lost and it can only be restarted from the beginning.
:end

_(Shutdown server at)_:
  : <input name="parityTuningHeatCritical" 
           size='1' class='narrow'
           type='text'
           value="<?=$parityTuningCfg['parityTuningHeatCritical']?>">&deg;<?= $tempUnit ?> below critical disk temperature threshold
  
:parity_tune_critical_plug:
> This value indicates how close to the value set for the Critical Disk Temperature Threshold a disks temperature is allowed to reach before a shutdown of the server is triggered.<br>You may want a small positive value to trigger the pause before Unraid gets around to sending you a notification that the temperature critical threshold has been reached for a disk.<br><br>If an explicit threshold has been defined for an individual drive then this is the value used.  If not the global setting will be used.
:end


&nbsp;

_(Parity Check Tuning logging level)_:
: <select name="parityTuningLogging" 
          size='1' class='narrow'
          onchange="presetParityTuning(this.form); checkLoggingMode(this.form)">
    <?=mk_option($parityTuningCfg['parityTuningLogging'], "0", _("Basic")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningLogging'], "1", _("Debug")) . "\n"?>
    <?=mk_option($parityTuningCfg['parityTuningLogging'], "2", _("Testing")) . "\n"?>
  </select>

:parity_tune_debug_plug:
> Write more verbose entries to the syslog file to help with debugging any problems using this plugin might encounter.<br><br>Messages written to the syslog by this plugin are identified by the fact that they are shown as coming from **Parity Check Tuning**.   With the **Disabled** option set these will only be a small number of messages indicating that this plugin has taken some action.<br><br>Setting this option to **Enabled** will result in additional entries being written to the syslog that give more information on what is happening when this plugin is running. They show how some of the internal operation of how the plugin is functioning. These additional entries are identified by the fact that they will have the word **DEBUG** added to the start of messages.  Some users (particularly those who have not used this plugin before) may like to use it to see more detail on how this plugin operates, but it is not expected that this option will be left enabled in normal running.<br><br>Finally there is an additional setting of **Testing** that is only intended for use by the developer but is left here for convenience.  It will write even more verbose messages to the syslog but these are not likely to be interesting (or even meaningful) to the average user.  These messages will have the word **TESTING** added to the start of messages. <br><br>Feedback is welcome as to whether it is worth introducing any intermediate option that outputs information type messages on the plugins activity, while omitting some of the lower level detail that is aimed at diagnosing any problems that might be encountered while the plugin is running. 
:end

&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned --> 

: <input type="submit" 
        name="#apply" 
        value="_(Apply)_" 
        id='Apply'>
<input type="button" 
        id="DONE" 
        value="_(Done)_"
        onclick="done()">
   
<?if (file_exists("/boot/config/parity-checks.log")):?>
&nbsp; <!--  This is to have a dummy field so buttons are correctly aligned -->
: <input type="button" 
       name="showHistory" 
       value="_(History)_" 
       onclick="openBox('/webGui/include/ParityHistory.php','Parity/Read-Check History',600,900,false)">_(Click to show parity-check history)_
       <a style='float:right' href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=U2FVNHSETTNRG' target='_blank'><img src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" title="_(Donate to plugin author)_"></a>
<?endif;?>

</form>

<?endif;?>
